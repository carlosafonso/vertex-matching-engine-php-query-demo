<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: match_service.proto

namespace Google\Cloud\Aiplatform\Container\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Parameters for a match query.
 *
 * Generated from protobuf message <code>google.cloud.aiplatform.container.v1beta1.MatchRequest</code>
 */
class MatchRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The ID of the DeploydIndex that will serve the request.
     * This MatchRequest is sent to a specific IndexEndpoint of the Control API,
     * as per the IndexEndpoint.network. That IndexEndpoint also has
     * IndexEndpoint.deployed_indexes, and each such index has an
     * DeployedIndex.id field.
     * The value of the field below must equal one of the DeployedIndex.id
     * fields of the IndexEndpoint that is being called for this request.
     *
     * Generated from protobuf field <code>string deployed_index_id = 1;</code>
     */
    protected $deployed_index_id = '';
    /**
     * The embedding values.
     *
     * Generated from protobuf field <code>repeated float float_val = 2;</code>
     */
    private $float_val;
    /**
     * The number of nearest neighbors to be retrieved from database for
     * each query. If not set, will use the default from
     * the service configuration.
     *
     * Generated from protobuf field <code>int32 num_neighbors = 3;</code>
     */
    protected $num_neighbors = 0;
    /**
     * The list of restricts.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;</code>
     */
    private $restricts;
    /**
     * Crowding is a constraint on a neighbor list produced by nearest neighbor
     * search requiring that no more than some value k' of the k neighbors
     * returned have the same value of crowding_attribute.
     * It's used for improving result diversity.
     * This field is the maximum number of matches with the same crowding tag.
     *
     * Generated from protobuf field <code>int32 per_crowding_attribute_num_neighbors = 5;</code>
     */
    protected $per_crowding_attribute_num_neighbors = 0;
    /**
     * The number of neighbors to find via approximate search before
     * exact reordering is performed. If not set, the default value from scam
     * config is used; if set, this value must be > 0.
     *
     * Generated from protobuf field <code>int32 approx_num_neighbors = 6;</code>
     */
    protected $approx_num_neighbors = 0;
    /**
     * The fraction of the number of leaves to search, set at query time allows
     * user to tune search performance. This value increase result in both search
     * accuracy and latency increase. The value should be between 0.0 and 1.0. If
     * not set or set to 0.0, query uses the default value specified in
     * NearestNeighborSearchConfig.TreeAHConfig.leaf_nodes_to_search_percent.
     *
     * Generated from protobuf field <code>int32 leaf_nodes_to_search_percent_override = 7;</code>
     */
    protected $leaf_nodes_to_search_percent_override = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $deployed_index_id
     *           The ID of the DeploydIndex that will serve the request.
     *           This MatchRequest is sent to a specific IndexEndpoint of the Control API,
     *           as per the IndexEndpoint.network. That IndexEndpoint also has
     *           IndexEndpoint.deployed_indexes, and each such index has an
     *           DeployedIndex.id field.
     *           The value of the field below must equal one of the DeployedIndex.id
     *           fields of the IndexEndpoint that is being called for this request.
     *     @type array<float>|\Google\Protobuf\Internal\RepeatedField $float_val
     *           The embedding values.
     *     @type int $num_neighbors
     *           The number of nearest neighbors to be retrieved from database for
     *           each query. If not set, will use the default from
     *           the service configuration.
     *     @type array<\Google\Cloud\Aiplatform\Container\V1beta1\PBNamespace>|\Google\Protobuf\Internal\RepeatedField $restricts
     *           The list of restricts.
     *     @type int $per_crowding_attribute_num_neighbors
     *           Crowding is a constraint on a neighbor list produced by nearest neighbor
     *           search requiring that no more than some value k' of the k neighbors
     *           returned have the same value of crowding_attribute.
     *           It's used for improving result diversity.
     *           This field is the maximum number of matches with the same crowding tag.
     *     @type int $approx_num_neighbors
     *           The number of neighbors to find via approximate search before
     *           exact reordering is performed. If not set, the default value from scam
     *           config is used; if set, this value must be > 0.
     *     @type int $leaf_nodes_to_search_percent_override
     *           The fraction of the number of leaves to search, set at query time allows
     *           user to tune search performance. This value increase result in both search
     *           accuracy and latency increase. The value should be between 0.0 and 1.0. If
     *           not set or set to 0.0, query uses the default value specified in
     *           NearestNeighborSearchConfig.TreeAHConfig.leaf_nodes_to_search_percent.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\MatchService::initOnce();
        parent::__construct($data);
    }

    /**
     * The ID of the DeploydIndex that will serve the request.
     * This MatchRequest is sent to a specific IndexEndpoint of the Control API,
     * as per the IndexEndpoint.network. That IndexEndpoint also has
     * IndexEndpoint.deployed_indexes, and each such index has an
     * DeployedIndex.id field.
     * The value of the field below must equal one of the DeployedIndex.id
     * fields of the IndexEndpoint that is being called for this request.
     *
     * Generated from protobuf field <code>string deployed_index_id = 1;</code>
     * @return string
     */
    public function getDeployedIndexId()
    {
        return $this->deployed_index_id;
    }

    /**
     * The ID of the DeploydIndex that will serve the request.
     * This MatchRequest is sent to a specific IndexEndpoint of the Control API,
     * as per the IndexEndpoint.network. That IndexEndpoint also has
     * IndexEndpoint.deployed_indexes, and each such index has an
     * DeployedIndex.id field.
     * The value of the field below must equal one of the DeployedIndex.id
     * fields of the IndexEndpoint that is being called for this request.
     *
     * Generated from protobuf field <code>string deployed_index_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDeployedIndexId($var)
    {
        GPBUtil::checkString($var, True);
        $this->deployed_index_id = $var;

        return $this;
    }

    /**
     * The embedding values.
     *
     * Generated from protobuf field <code>repeated float float_val = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFloatVal()
    {
        return $this->float_val;
    }

    /**
     * The embedding values.
     *
     * Generated from protobuf field <code>repeated float float_val = 2;</code>
     * @param array<float>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFloatVal($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::FLOAT);
        $this->float_val = $arr;

        return $this;
    }

    /**
     * The number of nearest neighbors to be retrieved from database for
     * each query. If not set, will use the default from
     * the service configuration.
     *
     * Generated from protobuf field <code>int32 num_neighbors = 3;</code>
     * @return int
     */
    public function getNumNeighbors()
    {
        return $this->num_neighbors;
    }

    /**
     * The number of nearest neighbors to be retrieved from database for
     * each query. If not set, will use the default from
     * the service configuration.
     *
     * Generated from protobuf field <code>int32 num_neighbors = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setNumNeighbors($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_neighbors = $var;

        return $this;
    }

    /**
     * The list of restricts.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRestricts()
    {
        return $this->restricts;
    }

    /**
     * The list of restricts.
     *
     * Generated from protobuf field <code>repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;</code>
     * @param array<\Google\Cloud\Aiplatform\Container\V1beta1\PBNamespace>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRestricts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\Aiplatform\Container\V1beta1\PBNamespace::class);
        $this->restricts = $arr;

        return $this;
    }

    /**
     * Crowding is a constraint on a neighbor list produced by nearest neighbor
     * search requiring that no more than some value k' of the k neighbors
     * returned have the same value of crowding_attribute.
     * It's used for improving result diversity.
     * This field is the maximum number of matches with the same crowding tag.
     *
     * Generated from protobuf field <code>int32 per_crowding_attribute_num_neighbors = 5;</code>
     * @return int
     */
    public function getPerCrowdingAttributeNumNeighbors()
    {
        return $this->per_crowding_attribute_num_neighbors;
    }

    /**
     * Crowding is a constraint on a neighbor list produced by nearest neighbor
     * search requiring that no more than some value k' of the k neighbors
     * returned have the same value of crowding_attribute.
     * It's used for improving result diversity.
     * This field is the maximum number of matches with the same crowding tag.
     *
     * Generated from protobuf field <code>int32 per_crowding_attribute_num_neighbors = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setPerCrowdingAttributeNumNeighbors($var)
    {
        GPBUtil::checkInt32($var);
        $this->per_crowding_attribute_num_neighbors = $var;

        return $this;
    }

    /**
     * The number of neighbors to find via approximate search before
     * exact reordering is performed. If not set, the default value from scam
     * config is used; if set, this value must be > 0.
     *
     * Generated from protobuf field <code>int32 approx_num_neighbors = 6;</code>
     * @return int
     */
    public function getApproxNumNeighbors()
    {
        return $this->approx_num_neighbors;
    }

    /**
     * The number of neighbors to find via approximate search before
     * exact reordering is performed. If not set, the default value from scam
     * config is used; if set, this value must be > 0.
     *
     * Generated from protobuf field <code>int32 approx_num_neighbors = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setApproxNumNeighbors($var)
    {
        GPBUtil::checkInt32($var);
        $this->approx_num_neighbors = $var;

        return $this;
    }

    /**
     * The fraction of the number of leaves to search, set at query time allows
     * user to tune search performance. This value increase result in both search
     * accuracy and latency increase. The value should be between 0.0 and 1.0. If
     * not set or set to 0.0, query uses the default value specified in
     * NearestNeighborSearchConfig.TreeAHConfig.leaf_nodes_to_search_percent.
     *
     * Generated from protobuf field <code>int32 leaf_nodes_to_search_percent_override = 7;</code>
     * @return int
     */
    public function getLeafNodesToSearchPercentOverride()
    {
        return $this->leaf_nodes_to_search_percent_override;
    }

    /**
     * The fraction of the number of leaves to search, set at query time allows
     * user to tune search performance. This value increase result in both search
     * accuracy and latency increase. The value should be between 0.0 and 1.0. If
     * not set or set to 0.0, query uses the default value specified in
     * NearestNeighborSearchConfig.TreeAHConfig.leaf_nodes_to_search_percent.
     *
     * Generated from protobuf field <code>int32 leaf_nodes_to_search_percent_override = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setLeafNodesToSearchPercentOverride($var)
    {
        GPBUtil::checkInt32($var);
        $this->leaf_nodes_to_search_percent_override = $var;

        return $this;
    }

}

